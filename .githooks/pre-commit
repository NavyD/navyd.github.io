#!/usr/bin/env python3

# [Can Git hook scripts be managed along with the repository?](https://stackoverflow.com/a/37861972/8566831)

import sys
from typing import List
from git import Repo
from pathlib import Path
import re
import yaml


def check(data):
    exists_keys = ['tags']
    for key in exists_keys:
        if key not in data:
            raise Exception(f'not found key: {key}')
    if not data['tags']:
        raise Exception(f'empty tags')


def run_check(paths: List[str]):
    ppat = re.compile(r'.*content/posts?/(.+?/)*.+\.md')
    md_meta_pat = re.compile(
        r'^---\s*(?:\n|\r\n?)((^.*(?:\n|\r\n?))*?)^---\s*$', re.MULTILINE)
    for path in paths:
        if ppat.match(path):
            txt = Path(path).read_text()
            if m := md_meta_pat.match(txt):
                print(f'checking for {path}')
                yml_txt = m.group(1)
                d = yaml.safe_load(yml_txt)
                try:
                    check(d)
                except Exception as e:
                    print(f'invalid {str(path)}: {e}', file=sys.stderr)
                    exit(1)


def find_diff_paths() -> List[str]:
    repo = Repo()
    # How to get list of staged files for commit ? (fullpaths): https://stackoverflow.com/a/44117990/8566831
    return [d.a_path for d in repo.index.diff("HEAD")]


if __name__ == '__main__':
    print('running pre commit')
    paths = find_diff_paths()
    print(f'found {len(paths)} diff files')
    run_check(paths)
